package dk.cphbusiness.banking.backend.Selenium;

// Generated by Selenium IDE
import org.junit.*;

import static dk.cphbusiness.banking.backend.datalayer.TestDatabaseUtility.*;
import static dk.cphbusiness.banking.backend.settings.Settings.DB_NAME;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;

import java.io.IOException;
import java.sql.SQLException;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.concurrent.TimeUnit;


public class TransferTest {
    private static WebDriver driver;
    private Map<String, Object> vars;
    JavascriptExecutor js;
    private static String dbName = DB_NAME;


    @Before
    public void setUp() throws IOException, SQLException {
        createTestDatabase();
        createTables(dbName);
        populateDatabase(dbName);

        ChromeOptions options = new ChromeOptions();
        options.addArguments("--headless", "--disable-gpu", "--window-size=1920,1200","--ignore-certificate-errors", "--silent");

        driver = new ChromeDriver(options);
        driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
        driver.get("http://localhost:5000/");
        driver.manage().window().setSize(new Dimension(1920, 994));

        js = (JavascriptExecutor) driver;
        vars = new HashMap<String, Object>();

    }

    @After
    public void close(){
        driver.quit();
    }


    @Test
    public void transferHappyPath() {
        //Assemble
        var amount = "90";
        var sourceAccNumber = "1111111111";
        String targetAccNumber = "3333333333";

        //Act
        driver.findElement(By.name("transfer-source"));
        driver.findElement(By.name("transfer-source")).sendKeys(sourceAccNumber);
        driver.findElement(By.name("transfer-target"));
        driver.findElement(By.name("transfer-target")).sendKeys(targetAccNumber);
        driver.findElement(By.name("transfer-amount"));
        driver.findElement(By.name("transfer-amount")).sendKeys(amount);
        driver.findElement(By.name("transfer-submit")).click();

        //Assert
        assertThat(driver.findElement(By.name("transfer-resamount")).getText(), is("$ " + amount));

    }

    @Test
    public void transferMinusAmount(){
        //Assemble
        var amount = "-100";
        var sourceAccNumber = "1111111111";
        String targetAccNumber = "3333333333";

        //Act
        driver.findElement(By.name("transfer-source"));
        driver.findElement(By.name("transfer-source")).sendKeys(sourceAccNumber);
        driver.findElement(By.name("transfer-target"));
        driver.findElement(By.name("transfer-target")).sendKeys(targetAccNumber);
        driver.findElement(By.name("transfer-amount"));
        driver.findElement(By.name("transfer-amount")).sendKeys(amount);
        driver.findElement(By.name("transfer-submit")).click();


        //Assert
        assertThat(driver.findElement(By.name("transfer-amount")).getText(), is(""));

    }

    @Test
    public void transferAmountZero(){
        //Assemble
        var amount = "000";
        var sourceAccNumber = "1111111111";
        String targetAccNumber = "3333333333";

        //Act
        driver.findElement(By.name("transfer-source")).click();
        driver.findElement(By.name("transfer-source")).sendKeys(sourceAccNumber);
        driver.findElement(By.name("transfer-target")).click();
        driver.findElement(By.name("transfer-target")).sendKeys(targetAccNumber);
        driver.findElement(By.name("transfer-amount")).click();
        driver.findElement(By.name("transfer-amount")).sendKeys(amount);
        driver.findElement(By.name("transfer-submit")).click();

        //Assert
        assertEquals("Invalid amount", driver.findElement(By.name("exceptionHolder")).getText());

    }

    @Test
    public void transferAmountNonNumericCharacters(){
        //Assemble
        var sourceAccNumber = "1111111111";
        String targetAccNumber = "3333333333";
        var amount = "abc*^¨%)¤?=";

        //Act
        driver.findElement(By.name("transfer-source")).click();
        driver.findElement(By.name("transfer-source")).sendKeys(sourceAccNumber);
        driver.findElement(By.name("transfer-target")).click();
        driver.findElement(By.name("transfer-target")).sendKeys(targetAccNumber);
        driver.findElement(By.name("transfer-amount")).click();
        driver.findElement(By.name("transfer-amount")).sendKeys(amount);
        driver.findElement(By.name("transfer-submit")).click();

        //Assert
        assertEquals("Invalid amount", driver.findElement(By.name("exceptionHolder")).getText());
    }

    @Test
    public void transferFromInvalidAccountNumber(){
        //Assemble
        var sourceAccNumber = "0";
        String targetAccNumber = "3333333333";
        var amount = "90";

        //Act
        driver.findElement(By.name("transfer-source")).click();
        driver.findElement(By.name("transfer-source")).sendKeys(sourceAccNumber);
        driver.findElement(By.name("transfer-target")).click();
        driver.findElement(By.name("transfer-target")).sendKeys(targetAccNumber);
        driver.findElement(By.name("transfer-amount")).click();
        driver.findElement(By.name("transfer-amount")).sendKeys(amount);
        driver.findElement(By.name("transfer-submit")).click();

        //Assert
        assertEquals("Accounts not found for the given id", driver.findElement(By.name("exceptionHolder")).getText());
    }

    @Test
    public void transferToInvalidAccountNumber(){
        //Assemble
        var sourceAccNumber = "1111111111";
        String targetAccNumber = "blabla";
        var amount = "90";

        //Act
        driver.findElement(By.name("transfer-source")).click();
        driver.findElement(By.name("transfer-source")).sendKeys(sourceAccNumber);
        driver.findElement(By.name("transfer-target")).click();
        driver.findElement(By.name("transfer-target")).sendKeys(targetAccNumber);
        driver.findElement(By.name("transfer-amount")).click();
        driver.findElement(By.name("transfer-amount")).sendKeys(amount);
        driver.findElement(By.name("transfer-submit")).click();

        //Assert
        assertEquals("Accounts not found for the given id", driver.findElement(By.name("exceptionHolder")).getText());
    }

    @Test
    public void transferToSameAccount() {
        //Assemble
        var amount = "90";
        var sourceAccNumber = "1111111111";

        //Act
        driver.findElement(By.name("transfer-source")).click();
        driver.findElement(By.name("transfer-source")).sendKeys(sourceAccNumber);
        driver.findElement(By.name("transfer-target")).click();
        driver.findElement(By.name("transfer-target")).sendKeys(sourceAccNumber);
        driver.findElement(By.name("transfer-amount")).click();
        driver.findElement(By.name("transfer-amount")).sendKeys(amount);
        driver.findElement(By.name("transfer-submit")).click();

        //Assert
        assertEquals("Can't transfer to same account", driver.findElement(By.name("exceptionHolder")).getText());

    }




}
